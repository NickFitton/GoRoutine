package templates

import (
	"strconv"
	"time"
	"github.com/google/uuid"
)

type RoutineDTO struct {
	Days []TaskDay
	Name string
}

type TaskDay struct {
	Date        time.Time
	StatusColor string
	Weekday     string
	Day         int
	Today       bool
}

var key = [][]string{
	{"Missed", "bg-red-500"},
	{"Completed", "bg-green-500"},
	{"Inactive", "bg-gray-500"},
	{"Ready to Complete", "bg-yellow-300"},
}

templ Routines(taskDays []RoutineDTO, userId uuid.UUID) {
	<div class="w-full p-6 space-y-6">
		<h1 class="text-2xl font-bold">Create a routine</h1>
		@RoutineCreator(userId)
		<h1 class="text-2xl font-bold">Your Routines</h1>
		<div class="grid sm:grid-cols-5 gap-4" id="key">
			for _, keyItem := range key {
				<div class="flex items-center gap-2">
					<div class={ "size-4 rounded-sm", keyItem[1] }></div>
					<span class="font-medium">{ keyItem[0] }</span>
				</div>
			}
			<div class="flex items-center gap-4">
				<div class="size-4 border-2 border-yellow-500 rounded-sm"></div>
				<span class="font-medium">Today</span>
			</div>
		</div>
		for _, routine := range taskDays {
			<div class="border-t border-b border-gray-200 py-4">
				<h2 class="font-semibold">{ routine.Name }</h2>
				<div class="flex gap-2 mt-2">
					for _, day := range routine.Days {
						<div class="flex flex-col items-center">
							<p>{ strconv.Itoa(day.Day) } { day.Weekday }</p>
							<div class={ "size-16", "rounded-md", day.StatusColor, templ.KV("border-2 border-yellow-500", day.Today) }></div>
						</div>
					}
				</div>
			</div>
		}
	</div>
}

templ RoutineCreator(userId uuid.UUID) {
	<div>
		<form id="routineForm">
			<label for="name">Routine Name:</label>
			<input id="name" name="name" required/>
			<label for="private">Is private</label>
			<input type="checkbox" id="private" name="private"/>
			<label for="everyday">Every day</label>
			<input type="checkbox" id="everyday" name="everyday"/>
			<p>-- OR -- </p>
			<select name="every" id="every-select" value="1">
				<option value="0">0</option>
				<option value="1">1</option>
				<option value="2">2</option>
				<option value="3">3</option>
				<option value="4">4</option>
				<option value="5">5</option>
				<option value="6">6</option>
			</select>
			<span>times every</span>
			<select name="inDays" id="in-days-select">
				<option value="2">2</option>
				<option value="3">3</option>
				<option value="4">4</option>
				<option value="5">5</option>
				<option value="6">6</option>
				<option value="7">7</option>
			</select>
			<span>offset by</span>
			<select name="offset" id="offset-select">
				<option value="0">0</option>
				<option value="1">1</option>
				<option value="2">2</option>
				<option value="3">3</option>
				<option value="4">4</option>
				<option value="5">5</option>
				<option value="6">6</option>
			</select>
			<button type="submit" class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2 w-full md:w-auto">Create</button>
		</form>
		<div id="preview" class="flex items-center gap-2">
			<div id="preview-0" class={ "size-16", "rounded-md", "bg-gray-300" }></div>
			<div id="preview-1" class={ "size-16", "rounded-md", "bg-gray-300" }></div>
			<div id="preview-2" class={ "size-16", "rounded-md", "bg-gray-300" }></div>
			<div id="preview-3" class={ "size-16", "rounded-md", "bg-gray-300" }></div>
			<div id="preview-4" class={ "size-16", "rounded-md", "bg-gray-300" }></div>
			<div id="preview-5" class={ "size-16", "rounded-md", "bg-gray-300" }></div>
			<div id="preview-6" class={ "size-16", "rounded-md", "bg-gray-300" }></div>
			<div id="preview-7" class={ "size-16", "rounded-md", "bg-gray-300", "border-2", "border-yellow-500" }></div>
			<div id="preview-8" class={ "size-16", "rounded-md", "bg-gray-300" }></div>
			<div id="preview-9" class={ "size-16", "rounded-md", "bg-gray-300" }></div>
			<div id="preview-10" class={ "size-16", "rounded-md", "bg-gray-300" }></div>
			<div id="preview-11" class={ "size-16", "rounded-md", "bg-gray-300" }></div>
			<div id="preview-12" class={ "size-16", "rounded-md", "bg-gray-300" }></div>
			<div id="preview-13" class={ "size-16", "rounded-md", "bg-gray-300" }></div>
			<div id="preview-14" class={ "size-16", "rounded-md", "bg-gray-300" }></div>
		</div>
	</div>
	<script>
    const restylePreview = (every, inDays, offset = 0) => {
      const todayEpoch = Math.floor(Date.now() / 86400000);
      for (let i=0; i < 15; i++) {
        const segment = document.getElementById("preview-" + i);
        segment.classList.remove(...["bg-red-200", "bg-green-500", "bg-gray-300", "bg-yellow-200"]);
        const epochMatch = ((todayEpoch - 7 + i + offset) % inDays < every);
        const active = epochMatch ? (i < 8 ? "bg-red-200" : "bg-yellow-200") : "bg-gray-300";
        segment.classList.add(active);
      }
    }
		restylePreview(1, 2);


    document.getElementById("every-select").addEventListener("input", (e) => {
      const everySelect = e.target.value;
      const inDaysSelect = document.getElementById("in-days-select").value;
      restylePreview(everySelect, inDaysSelect);
    });
    document.getElementById("in-days-select").addEventListener("input", (e) => {
      const everySelect = document.getElementById("every-select").value;
      const inDaysSelect = e.target.value;
      restylePreview(everySelect, inDaysSelect);
    });
    document.getElementById("offset-select").addEventListener("input", (e) => {
      const everySelect = document.getElementById("every-select").value;
      const inDaysSelect = document.getElementById("in-days-select").value;
      const offsetSelect = parseInt(e.target.value);
      restylePreview(everySelect, inDaysSelect, offsetSelect);
    });


    document.getElementById("everyday").addEventListener("input", (e) => {
      const {checked} = e.target;
      console.log(checked);

      if (checked) {
        document.getElementById("in-days-select").setAttribute("disabled", true);
        document.getElementById("every-select").setAttribute("disabled", true);
        document.getElementById("offset-select").setAttribute("disabled", true);
        restylePreview(1, 1);
        return;
      }
      document.getElementById("in-days-select").removeAttribute("disabled");
      document.getElementById("every-select").removeAttribute("disabled");
      document.getElementById("offset-select").removeAttribute("disabled");
      const everySelect =  document.getElementById("every-select").value;
      const inDaysSelect = document.getElementById("in-days-select").value;
      restylePreview(everySelect, inDaysSelect);
    })


    const form = document.getElementById("routineForm");
    form.addEventListener("submit", (event) => {
      event.preventDefault();
			const userId = window.location.pathname.split('/')[2];
      const name = document.getElementById("name").value;
      const private = document.getElementById("private").value;
      const inDays = parseInt(document.getElementById("in-days-select").value, 10);
      const every = parseInt(document.getElementById("every-select").value, 10);
      const offset = parseInt(document.getElementById("offset-select").value, 10);

      fetch(`http://localhost:8080/api/users/${userId}/routines`, {
        method: "POST",
        body: JSON.stringify({ name, private, inDays, every, offset }),
        headers: {
          "Content-Type": "application/json"
        }
      }).then(response => {
        console.log(response);
        try {
					const location = response.headers.get("Location");
					console.log("Location", location)
					window.location.replace(location);
        } catch (e) {
          console.error(e)
        }
      })
      .catch(console.error);
    });
  </script>
}
